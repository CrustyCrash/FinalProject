<?xml version='1.0' encoding='UTF-8'?>

<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:int="http://www.w3.org/2001/XMLSchema#int">
 <internal>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
 </internal>
 <queryLibrary>
  <countQuery id="GPUEventCount" displayName="%UncoreEventCount">
   <instanceDbTable>gpu_data::dd_sample</instanceDbTable>
   <instanceBandTable>dd_gpu_node</instanceBandTable>
   <joinGroupInstanceDbTable>gpu_compute_task_data</joinGroupInstanceDbTable>
   <displayAttributes>
    <selfFormat>count</selfFormat>
    <boolean:allowCollapse>false</boolean:allowCollapse>
    <timelineObjectType>interval</timelineObjectType>
   </displayAttributes>
  </countQuery>
  <instanceCountQuery id="GPUSampleCount" displayName="%GPUSampleCount">
   <instanceDbTable>gpu_data::dd_sample</instanceDbTable>
   <valueType>double</valueType>
   <instanceBandTable>dd_gpu_node</instanceBandTable>
  </instanceCountQuery>
  <infoQuery id="GPUEventType" displayName="%UncoreEventType">
   <dbPath>gpu_data::dd_sample.uncore_event_type</dbPath>
   <displayDbPathSuffix>name</displayDbPathSuffix>
   <confidenceTemplate>query(&quot;/GPUSampleCount&quot;) &gt; 5</confidenceTemplate>
  </infoQuery>
  <infoQuery id="GPUPCIID" displayName="%GPUPCIID">
   <dbPath>dd_band::dd_gpu_node.tile.adapter</dbPath>
   <displayDbPathSuffix>device_id</displayDbPathSuffix>
  </infoQuery>
  <derivedQuery id="GPUGpuTimeMetric" displayName="GPU Time Elapsed" description="Time elapsed on the GPU during the measurement.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[GpuTime]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGpuTimeMetricSource" displayName="GPU Time Elapsed" description="Time elapsed on the GPU during the measurement.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[GpuTime]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGpuTimeMetricMaxValue"/>
  <derivedQuery id="GPUGpuCoreClocksMetric" displayName="GPU Core Clocks" description="The total number of GPU core clocks elapsed during the measurement.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGpuCoreClocksMetricSource" displayName="GPU Core Clocks" description="The total number of GPU core clocks elapsed during the measurement.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGpuCoreClocksMetricMaxValue"/>
  <derivedQuery id="GPUAvgGpuCoreFrequencyMHzMetric" displayName="AVG GPU Core Frequency" description="Average GPU Core Frequency in the measurement.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 1000) / query(&quot;/GPUGpuTimeMetricSource&quot;))</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUAvgGpuCoreFrequencyMHzMetricSource" displayName="AVG GPU Core Frequency" description="Average GPU Core Frequency in the measurement.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 1000) / query(&quot;/GPUGpuTimeMetricSource&quot;))</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUAvgGpuCoreFrequencyMHzMetricMaxValue"/>
  <derivedQuery id="GPUGpuBusyMetric" displayName="GPU Busy" description="The percentage of time in which the GPU has been processing GPU commands.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuBusy]&quot;) / query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 100)) / 100</valueEval>
   <valueType>ratio</valueType>
  </derivedQuery>
  <derivedQuery id="GPUGpuBusyMetricSource" displayName="GPU Busy" description="The percentage of time in which the GPU has been processing GPU commands.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GpuBusy]&quot;) / query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 100)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGpuBusyMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsThreadsMetric" displayName="VS Threads Dispatched" description="The total number of vertex shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[VsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsThreadsMetricSource" displayName="VS Threads Dispatched" description="The total number of vertex shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[VsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUHsThreadsMetric" displayName="HS Threads Dispatched" description="The total number of hull shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[HsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUHsThreadsMetricSource" displayName="HS Threads Dispatched" description="The total number of hull shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[HsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUHsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUDsThreadsMetric" displayName="DS Threads Dispatched" description="The total number of domain shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[DsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUDsThreadsMetricSource" displayName="DS Threads Dispatched" description="The total number of domain shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[DsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUDsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUGsThreadsMetric" displayName="GS Threads Dispatched" description="The total number of geometry shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[GsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGsThreadsMetricSource" displayName="GS Threads Dispatched" description="The total number of geometry shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[GsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUPsThreadsMetric" displayName="PS Threads Dispatched" description="The total number of pixel shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[PsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsThreadsMetricSource" displayName="PS Threads Dispatched" description="The total number of pixel shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[PsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUCsThreadsMetric" displayName="CS Threads Dispatched" description="The total number of compute shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[CsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUCsThreadsMetricSource" displayName="CS Threads Dispatched" description="The total number of compute shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[CsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUCsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUEuActiveMetric" displayName="EU Active" description="The percentage of time in which the Execution Units were actively processing.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[EuActive]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
   <valueType>ratio</valueType>
  </derivedQuery>
  <derivedQuery id="GPUEuActiveMetricSource" displayName="EU Active" description="The percentage of time in which the Execution Units were actively processing.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[EuActive]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuStallMetric" displayName="EU Stall" description="The percentage of time in which the Execution Units were stalled.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[EuStall]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
   <valueType>ratio</valueType>
  </derivedQuery>
  <derivedQuery id="GPUEuStallMetricSource" displayName="EU Stall" description="The percentage of time in which the Execution Units were stalled.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[EuStall]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuStallMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuThreadOccupancyMetric" displayName="EU Thread Occupancy" description="The percentage of time in which hardware threads occupied EUs.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[EuThreadOccupancy]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
   <valueType>ratio</valueType>
  </derivedQuery>
  <derivedQuery id="GPUEuThreadOccupancyMetricSource" displayName="EU Thread Occupancy" description="The percentage of time in which hardware threads occupied EUs.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[EuThreadOccupancy]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuThreadOccupancyMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPURasterizedPixelsMetric" displayName="Rasterized Pixels" description="The total number of rasterized pixels.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[RasterizedPixels]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPURasterizedPixelsMetricSource" displayName="Rasterized Pixels" description="The total number of rasterized pixels.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[RasterizedPixels]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPURasterizedPixelsMetricMaxValue"/>
  <derivedQuery id="GPUHiDepthTestFailsMetric" displayName="Early Hi-Depth Test Fails" description="The total number of pixels dropped on early hierarchical depth test.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[HiDepthTestFails]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUHiDepthTestFailsMetricSource" displayName="Early Hi-Depth Test Fails" description="The total number of pixels dropped on early hierarchical depth test.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[HiDepthTestFails]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUHiDepthTestFailsMetricMaxValue"/>
  <derivedQuery id="GPUEarlyDepthTestFailsMetric" displayName="Early Depth Test Fails" description="The total number of pixels dropped on early depth test.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[EarlyDepthTestFails]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEarlyDepthTestFailsMetricSource" displayName="Early Depth Test Fails" description="The total number of pixels dropped on early depth test.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[EarlyDepthTestFails]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEarlyDepthTestFailsMetricMaxValue"/>
  <derivedQuery id="GPUSamplesKilledInPsMetric" displayName="Samples Killed in PS" description="The total number of samples or pixels dropped in pixel shaders.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplesKilledInPs]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplesKilledInPsMetricSource" displayName="Samples Killed in PS" description="The total number of samples or pixels dropped in pixel shaders.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplesKilledInPs]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplesKilledInPsMetricMaxValue"/>
  <derivedQuery id="GPUPixelsFailingPostPsTestsMetric" displayName="Pixels Failing Tests" description="The total number of pixels dropped on post-PS alpha, stencil, or depth tests.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[PixelsFailingPostPsTests]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPixelsFailingPostPsTestsMetricSource" displayName="Pixels Failing Tests" description="The total number of pixels dropped on post-PS alpha, stencil, or depth tests.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[PixelsFailingPostPsTests]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPixelsFailingPostPsTestsMetricMaxValue"/>
  <derivedQuery id="GPUSamplesWrittenMetric" displayName="Samples Written" description="The total number of samples or pixels written to all render targets.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplesWritten]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplesWrittenMetricSource" displayName="Samples Written" description="The total number of samples or pixels written to all render targets.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplesWritten]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplesWrittenMetricMaxValue"/>
  <derivedQuery id="GPUSamplesBlendedMetric" displayName="Samples Blended" description="The total number of blended samples or pixels written to all render targets.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplesBlended]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplesBlendedMetricSource" displayName="Samples Blended" description="The total number of blended samples or pixels written to all render targets.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplesBlended]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplesBlendedMetricMaxValue"/>
  <derivedQuery id="GPUSamplerTexelsMetric" displayName="Sampler Texels" description="The total number of texels seen on input (with 2x2 accuracy) in all sampler units.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplerTexels]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplerTexelsMetricSource" displayName="Sampler Texels" description="The total number of texels seen on input (with 2x2 accuracy) in all sampler units.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplerTexels]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplerTexelsMetricMaxValue"/>
  <derivedQuery id="GPUSamplerTexelMissesMetric" displayName="Sampler Texels Misses" description="The total number of texels lookups (with 2x2 accuracy) that missed L1 sampler cache.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplerTexelMisses]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplerTexelMissesMetricSource" displayName="Sampler Texels Misses" description="The total number of texels lookups (with 2x2 accuracy) that missed L1 sampler cache.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplerTexelMisses]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplerTexelMissesMetricMaxValue"/>
  <derivedQuery id="GPUSlmBytesReadMetric" displayName="SLM Bytes Read" description="The total number of GPU memory bytes read from shared local memory.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[SlmBytesRead]&quot;) * 64)) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesReadMetricSource" displayName="SLM Bytes Read" description="The total number of GPU memory bytes read from shared local memory.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SlmBytesRead]&quot;) * 64)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesReadMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 128) * $gpuEuDualSubslicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesReadMetricAbsMaxValue">
   <valueEval>1075</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesWrittenMetric" displayName="SLM Bytes Written" description="The total number of GPU memory bytes written into shared local memory.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[SlmBytesWritten]&quot;) * 64)) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesWrittenMetricSource" displayName="SLM Bytes Written" description="The total number of GPU memory bytes written into shared local memory.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SlmBytesWritten]&quot;) * 64)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesWrittenMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 128) * $gpuEuDualSubslicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesWrittenMetricAbsMaxValue">
   <valueEval>1075</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderMemoryAccessesMetric" displayName="Shader Memory Accesses" description="The total number of shader memory accesses to L3.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[ShaderMemoryAccesses]&quot;)</valueEval>
   <valueType>int</valueType>
  </derivedQuery>
  <derivedQuery id="GPUShaderMemoryAccessesMetricSource" displayName="Shader Memory Accesses" description="The total number of shader memory accesses to L3.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[ShaderMemoryAccesses]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderMemoryAccessesMetricMaxValue"/>
  <derivedQuery id="GPUShaderAtomicsMetric" displayName="Shader Atomic Memory Accesses" description="The total number of shader atomic memory accesses.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[ShaderAtomics]&quot;)</valueEval>
   <valueType>int</valueType>
  </derivedQuery>
  <derivedQuery id="GPUShaderAtomicsMetricSource" displayName="Shader Atomic Memory Accesses" description="The total number of shader atomic memory accesses.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[ShaderAtomics]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderAtomicsMetricMaxValue"/>
  <derivedQuery id="GPUL3ShaderThroughputMetric" displayName="L3 Shader Throughput" description="The total number of GPU memory bytes transferred between shaders and L3 caches w/o URB.">
   <valueEval>((query(&quot;/GPUShaderMemoryAccessesMetricSource&quot;) * 64)) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUL3ShaderThroughputMetricSource" displayName="L3 Shader Throughput" description="The total number of GPU memory bytes transferred between shaders and L3 caches w/o URB.">
   <valueEval>(query(&quot;/GPUShaderMemoryAccessesMetricSource&quot;) * 64)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUL3ShaderThroughputMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64) * $gpuEuDualSubslicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUL3ShaderThroughputMetricAbsMaxValue">
   <valueEval>537</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderBarriersMetric" displayName="Shader Barrier Messages" description="The total number of shader barrier messages.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[ShaderBarriers]&quot;)</valueEval>
   <valueType>int</valueType>
  </derivedQuery>
  <derivedQuery id="GPUShaderBarriersMetricSource" displayName="Shader Barrier Messages" description="The total number of shader barrier messages.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[ShaderBarriers]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderBarriersMetricMaxValue"/>
  <derivedQuery id="GPUGtiReadThroughputMetric" displayName="GTI Read Throughput" description="The total number of GPU memory bytes read from GTI.">
   <valueEval>((64 * query(&quot;/GPUEventCount/GPUEventType[GtiReadThroughput]&quot;))) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiReadThroughputMetricSource" displayName="GTI Read Throughput" description="The total number of GPU memory bytes read from GTI.">
   <valueEval>(64 * query(&quot;/GPUEventCount/GPUEventType[GtiReadThroughput]&quot;))</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiReadThroughputMetricMaxValue">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiReadThroughputMetricAbsMaxValue">
   <valueEval>89</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiWriteThroughputMetric" displayName="GTI Write Throughput" description="The total number of GPU memory bytes written to GTI.">
   <valueEval>((64 * query(&quot;/GPUEventCount/GPUEventType[GtiWriteThroughput]&quot;))) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiWriteThroughputMetricSource" displayName="GTI Write Throughput" description="The total number of GPU memory bytes written to GTI.">
   <valueEval>(64 * query(&quot;/GPUEventCount/GPUEventType[GtiWriteThroughput]&quot;))</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiWriteThroughputMetricMaxValue">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiWriteThroughputMetricAbsMaxValue">
   <valueEval>89</valueEval>
  </derivedQuery>
 </queryLibrary>
</bag>
